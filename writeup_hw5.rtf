{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh17440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Challenge 1:\
Got the secret from the javascript from source.\
\
Challenge 2:\
Understood that the given output is the directory names and by giving random outputs found the vulnerability that exposes the whole file system. From tmp folder got the secret from level2 directory.\
\
Challenge 3:\
Using the suggestion I tried working only with id and then tried only with the other 3 inputs, figured out that ID is the md5hash of email id and then gave the md5 hash of the given email id to retrieve the secret.\
\
Challenge 4:\
Found the vulnerability where I could read the files belonging to gid level4. To get which file to read used level 2 and found the secret.\
\
Challenge 5:\
Found blacklist as one of the cookie parameters, since saw this on level 2 as a file, knew that something has to be done with this. changed it to \'91retrieve\'92 and \'91source\'92 with admin=1 and found 2 py scripts which led tampering the cookie further and add password value to it to retrieve the secret .\
\
Challenge 6:\
Challenge 6 was again about tampering the cookie. This time tampered with the user agent and got to know it needs a php file. Again used level 2 to find a php file. Didn\'92t find one but there was a file that was retrieving secret so copied it as php and opened it using level6 vulnerability.\
\
Challenge 7: Understood that Sql injection is to be done. Used Sqlmap and Fire foxy to get the contents of table and got the secret.\
\
Challenge 8: Understood that Sql injection is to be done. Used Sqlmap and Fire foxy to get the contents of table and got the secret.\
}